global topic chisel3Root: String
def chisel3Root =
  def paths = subscribe chisel3Root
  match paths
    Nil = "chisel3" # default path in workspace
    path, Nil = path
    _ = panic "Multiple published paths for chisel3 root: {format paths}"

def buildDir = mkdir "build/chisel3"

def scalacOpts = "-deprecation", "-feature", Nil

# We ignore scalaVersion because it comes from ScalaModule
# The scalaVersion in ivydependencies.json is purely for fetching
def macrosParadiseIvyDep =
  def extractIvyDep json =
    json // `macrosParadise` // `dependencies` | getJString
    | omapPartial stringToIvyDep
    | getOrFail (makeError "macrosParadise ivy dependency not found!")
  readIvyDepsJSON here
  | rmapPass extractIvyDep

# TODO Should this be in the standard lib?
def orElse b = match _
  Some a = Some a
  None   = b

# Adds an a compiler plugin dependency on macros paradise
# If module is already broken, keeps old error
global def addMacrosParadiseCompilerPlugin module =
  match macrosParadiseIvyDep
    Pass dep = module | editScalaModuleCompilerPlugins (dep, _)
    Fail err = module | editScalaModuleError (orElse (Some err))

global def chisel3CoreMacros =
  makeScalaModuleFromJSON here "chisel3Macros"
  | setScalaModuleRootDir "{chisel3Root}/macros"
  | setScalaModuleScalacOptions scalacOpts
  | addMacrosParadiseCompilerPlugin

global def chisel3Frontend =
  makeScalaModuleFromJSON here "chisel3Core"
  | setScalaModuleRootDir "{chisel3Root}/core"
  | setScalaModuleDeps (chisel3CoreMacros, firrtlScalaModule, Nil)
  | setScalaModuleScalacOptions scalacOpts
  | addMacrosParadiseCompilerPlugin

global def chisel3Version = "3.3.0-RC3"

def buildInfo ver =
  def content =
    "package chisel3\n"
    , "import scala.Predef._\n"
    , "/** This object was generated by chisel3-wake */"
    , "case object BuildInfo \{"
    , "  val buildInfoPackage: String = \"chisel3\""
    , "  val version: String = \"{chisel3Version}\""
    , "  val scalaVersion: String = \"{ver.scalaVersionToString}\""
    , "  override val toString: String ="
    , "    s\"buildInfoPackage: $buildInfoPackage, version: $version, scalaVersion: $scalaVersion\""
    , "\}"
    , Nil
  def outDir = mkdir "{buildDir.getPathName}/buildInfo"
  def outFile = "{outDir.getPathName}/BuildInfo.scala"
  write outFile (content | catWith "\n")

global def chisel3ScalaModule =
  def base =
    makeScalaModuleFromJSON here "chisel3"
    | setScalaModuleRootDir chisel3Root
    | setScalaModuleDeps (chisel3Frontend, Nil)
    | setScalaModuleScalacOptions scalacOpts
    | addMacrosParadiseCompilerPlugin
  def genSrcs Unit = buildInfo base.getScalaModuleScalaVersion, Nil
  base
  | setScalaModuleFnGeneratedSources genSrcs
