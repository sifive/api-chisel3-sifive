
def buildDir = mkdir "build/chisel3"

def scalacOpts = "-deprecation", "-feature", Nil

def chisel3Root = findGitRepositoryWithFallback "chisel3"

# We ignore scalaVersion because it comes from ScalaModule
# The scalaVersion in ivydependencies.json is purely for fetching
def macrosParadiseIvyDep =
  def extractIvyDep json =
    json // `macrosParadise` // `dependencies` | getJString
    | omapPartial stringToIvyDep
    | getOrFail (makeError "macrosParadise ivy dependency not found!")
  readIvyDepsJSON here
  | rmapPass extractIvyDep

# Adds an a compiler plugin dependency on macros paradise
# If module is already broken, keeps old error
global def addMacrosParadiseCompilerPlugin module =
  match macrosParadiseIvyDep
    Pass dep = module | editScalaModuleCompilerPlugins (dep, _)
    Fail err = module | editScalaModuleError (orElse (Some err))

# TODO This should be default behavior in api-scala-sifive
def scalaModuleAddExtraSourceDirs module =
  def major = module.getScalaModuleScalaVersion.scalaVersionMajorString
  def dir = "src/main/scala-{major}"
  module
  | editScalaModuleSourceDirs (dir, _)

# NOTE, currently unused, see addChisel3CompilerPlugin
global def chisel3Plugin =
  makeScalaModuleFromJSON here "chisel3Plugin"
  | setScalaModuleRootDir "{chisel3Root}/plugin"
  | scalaModuleAddExtraSourceDirs

# We ignore scalaVersion because it comes from ScalaModule
# The scalaVersion in ivydependencies.json is purely for fetching
def chisel3PluginIvyDep =
  def extractIvyDep json =
    json // `chisel3PluginIvyDep` // `dependencies` | getJString
    | omapPartial stringToIvyDep
    | getOrFail (makeError "chisel3Plugin ivy dependency not found!")
  readIvyDepsJSON here
  | rmapPass extractIvyDep

# NOTE, this uses the published plugin because passing a path in the scalac options is sketchy -
#   we shouldn't use absolute paths but we don't know what to make the path relative to
# The rocket-chip SBT flow does the same thing (for different reasons)
global def addChisel3CompilerPlugin module =
  match chisel3PluginIvyDep
    Pass dep = module | editScalaModuleCompilerPlugins (dep, _)
    Fail err = module | editScalaModuleError (orElse (Some err))


global def chisel3CoreMacros =
  makeScalaModuleFromJSON here "chisel3Macros"
  | setScalaModuleRootDir "{chisel3Root}/macros"
  | setScalaModuleScalacOptions scalacOpts
  | addMacrosParadiseCompilerPlugin

global def chisel3Version = "3.4.0-RC3"

def buildInfo ver =
  def content =
    "%
      package chisel3
      import scala.Predef._
      /** This object was generated by api-chisel3-sifive */
      case object BuildInfo {
        val buildInfoPackage: String = "chisel3"
        val version: String = "%{chisel3Version}"
        val scalaVersion: String = "%{ver.scalaVersionToString}"
        override val toString: String =
          s"buildInfoPackage: $buildInfoPackage, version: $version, scalaVersion: $scalaVersion"
      }
      %"
  def outDir = mkdir "{buildDir.getPathName}/buildInfo"
  def outFile = "{outDir.getPathName}/BuildInfo.scala"
  content
  | write outFile

global def chisel3Frontend =
  def base =
    makeScalaModuleFromJSON here "chisel3Core"
    | setScalaModuleRootDir "{chisel3Root}/core"
    | setScalaModuleDeps (chisel3CoreMacros, firrtlScalaModule, Nil)
    | setScalaModuleScalacOptions scalacOpts
    | addMacrosParadiseCompilerPlugin
  def genSrcs Unit = buildInfo base.getScalaModuleScalaVersion, Nil
  base
  | setScalaModuleFnGeneratedSources genSrcs

global def chisel3ScalaModule =
  makeScalaModuleFromJSON here "chisel3"
  | setScalaModuleRootDir chisel3Root
  | setScalaModuleDeps (chisel3Frontend, Nil)
  | setScalaModuleScalacOptions scalacOpts
  | addMacrosParadiseCompilerPlugin
  | addChisel3CompilerPlugin
